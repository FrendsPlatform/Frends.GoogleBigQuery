using Frends.GoogleBigQuery.ExecuteQuery.Definitions;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.BigQuery.V2;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.GoogleBigQuery.ExecuteQuery;

/// <summary>
/// Google BigQuery Task.
/// </summary>
public class GoogleBigQuery
{
    /// <summary>
    /// Frends Task to execute Google BigQuery query.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.GoogleBigQuery.ExecuteQuery)
    /// </summary>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="input">Input parameters.</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, dynamic Data, string ErrorMessage }</returns>
    public static async Task<Result> ExecuteQuery([PropertyTab] Connection connection, [PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            var client = await GetClient(connection.ProjectId, connection.SecretJson, connection.CredentialsFilePath);
            var result = await RunQuery(client, input, options, cancellationToken);
            return new Result(true, result, null);
        }
        catch (Exception ex)
        {
            if (options.ThrowOnError)
                throw new Exception(ex.Message);

            return new Result(false, null, ex.Message);
        }
    }

    private static async Task<BigQueryClient> GetClient(string projectId, string secretJson, string credentialsFilePath)
    {
        GoogleCredential credential = null;
        if (!string.IsNullOrWhiteSpace(secretJson))
            credential = GoogleCredential.FromJson(secretJson);

        if (!string.IsNullOrWhiteSpace(credentialsFilePath))
            credential = GoogleCredential.FromFile(credentialsFilePath);

        return await BigQueryClient.CreateAsync(projectId, credential);
    }

    private static async Task<JToken> RunQuery(BigQueryClient client, Input input, Options options, CancellationToken cancellationToken)
    {
        List<BigQueryParameter> parameters = new();
        JArray jsonArray = new();
        var exceptionMsg = "";

        if (input.BigQueryParameter != null)
            parameters = input.BigQueryParameter.Select(param => new BigQueryParameter(param.Name, GetBigQueryDbType(param.BigQueryDbType), param.Value)).ToList();

        bool success = false;

        for (var retryAttempt = 0; retryAttempt <= options.MaxRetryAttempts; retryAttempt++)
        {
            try
            {
                BigQueryResults results = null;
                results = await client.ExecuteQueryAsync(input.Query, parameters, cancellationToken: cancellationToken);

                foreach (var row in results)
                {
                    JObject jsonObject = new();

                    foreach (var field in row.Schema.Fields)
                    {
                        var fieldValue = row[field.Name];
                        if (fieldValue != null)
                            jsonObject[field.Name] = JToken.FromObject(fieldValue);
                        else
                            jsonObject[field.Name] = null;
                    }

                    if (jsonObject.HasValues)
                        jsonArray.Add(jsonObject);
                }


                success = true;
                break;
            }
            catch (Exception ex)
            {
                exceptionMsg = $"Query execution failed: {ex}";
                await Task.Delay(options.Delay, cancellationToken);
            }
        }
        if (!success)
            throw new Exception(@$"Query execution failed after maximum retry attempts. Error: {exceptionMsg}");

        return jsonArray;
    }

    private static BigQueryDbType? GetBigQueryDbType(BigQueryDbTypes bigQueryDbType)
    {
        return bigQueryDbType switch
        {
            BigQueryDbTypes.Int64 => (BigQueryDbType?)BigQueryDbType.Int64,
            BigQueryDbTypes.Float64 => (BigQueryDbType?)BigQueryDbType.Float64,
            BigQueryDbTypes.Bool => (BigQueryDbType?)BigQueryDbType.Bool,
            BigQueryDbTypes.String => (BigQueryDbType?)BigQueryDbType.String,
            BigQueryDbTypes.Bytes => (BigQueryDbType?)BigQueryDbType.Bytes,
            BigQueryDbTypes.Date => (BigQueryDbType?)BigQueryDbType.Date,
            BigQueryDbTypes.DateTime => (BigQueryDbType?)BigQueryDbType.DateTime,
            BigQueryDbTypes.Time => (BigQueryDbType?)BigQueryDbType.Time,
            BigQueryDbTypes.Timestamp => (BigQueryDbType?)BigQueryDbType.Timestamp,
            BigQueryDbTypes.Array => (BigQueryDbType?)BigQueryDbType.Array,
            BigQueryDbTypes.Struct => (BigQueryDbType?)BigQueryDbType.Struct,
            BigQueryDbTypes.Numeric => (BigQueryDbType?)BigQueryDbType.Numeric,
            BigQueryDbTypes.Geography => (BigQueryDbType?)BigQueryDbType.Geography,
            BigQueryDbTypes.BigNumeric => (BigQueryDbType?)BigQueryDbType.BigNumeric,
            BigQueryDbTypes.Json => (BigQueryDbType?)BigQueryDbType.Json,
            BigQueryDbTypes.Empty => null,
            _ => null,
        };
    }
}
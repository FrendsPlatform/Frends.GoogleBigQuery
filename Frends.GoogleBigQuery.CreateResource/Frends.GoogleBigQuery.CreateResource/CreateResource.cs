using Frends.GoogleBigQuery.CreateResource.Definitions;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Bigquery.v2.Data;
using Google.Apis.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.GoogleBigQuery.CreateResource;

/// <summary>
/// Google BigQuery Task.
/// </summary>
public class GoogleBigQuery
{
    /// <summary>
    /// Create resource to BigQuery table.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.GoogleBigQuery.CreateResourceResource)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, string Url, string ErrorMessage }</returns>
    public static async Task<Result> CreateResource([PropertyTab] Connection connection, [PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            var serviceInitializer = new BaseClientService.Initializer
            {
                HttpClientInitializer = await GetServiceAccountCredential(connection, cancellationToken),
                ApplicationName = "BigQueryApp",
                BaseUri = string.IsNullOrWhiteSpace(connection.BaseUri) ? null : connection.BaseUri,
            };
            var bigqueryService = new BigqueryService(serviceInitializer);

            if (bigqueryService is not null)
                return new Result(true, await CreateRequest(new BigqueryService(serviceInitializer), connection, input, cancellationToken), null);
            else
            {
                if (options.ThrowOnError)
                    throw new Exception("Failed to initialize BigqueryService.");

                return new Result(false, null, "Failed to initialize BigqueryService.");
            }
        }
        catch (Exception ex)
        {
            if (options.ThrowOnError)
                throw new Exception($"Error occured: {ex.Message}");

            return new Result(false, null, $"Error occured: {ex.Message}");
        }
    }

    private static async Task<ServiceAccountCredential> GetServiceAccountCredential(Connection connection, CancellationToken cancellationToken)
    {
        var jsonCredentials = connection.ReadJsonMethod == ReadJsonMethods.File ? await File.ReadAllTextAsync(connection.CredentialsFilePath, cancellationToken) : connection.SecretJson;

        ServiceAccountCredential credential;
        using var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(jsonCredentials));
        credential = GoogleCredential.FromStream(stream)
                                     .CreateScoped(BigqueryService.Scope.Bigquery)
                                     .UnderlyingCredential as ServiceAccountCredential;

        return credential;
    }

    private static async Task<string> CreateDatasetResource(BigqueryService service, string projectId, Input input, CancellationToken cancellationToken)
    {
        List<Dataset.AccessData> accessList = new();
        Dictionary<string, string> labels = new();
        List<Dataset.TagsData> tags = new();

        if (input.Access is not null)
            foreach (var param in input.Access)
                accessList.Add(new()
                {
                    Role = param.Role,
                    UserByEmail = param.UserByEmail
                });

        if (input.Label is not null)
            foreach (var param in input.Label)
                labels.Add(param.Key, param.Value);

        if (input.Tag is not null)
            foreach (var param in input.Tag)
                tags.Add(new Dataset.TagsData { TagKey = param.Key, TagValue = param.Value });

        Dataset dataset = new()
        {
            Access = accessList is null ? null : accessList,
            DefaultEncryptionConfiguration = !input.SetEncryptionConfiguration ? null : new EncryptionConfiguration
            {
                KmsKeyName = string.IsNullOrEmpty(input.KmsKeyName) ? null : input.KmsKeyName,
            },
            Description = string.IsNullOrWhiteSpace(input.Description) ? null : input.Description,
            FriendlyName = string.IsNullOrWhiteSpace(input.FriendlyName) ? null : input.FriendlyName,
            Labels = labels is null ? null : labels,
            Location = input.Location,
            StorageBillingModel = input.StorageBillingModel,
            Tags = tags is null ? null : tags,
            DatasetReference = new DatasetReference { DatasetId = input.DatasetId },
            IsCaseInsensitive = input.IsCaseInsensitive,
            MaxTimeTravelHours = input.MaxTimeTravelHours > 0 ? input.MaxTimeTravelHours : null,
        };

        var result = await service.Datasets.Insert(dataset, projectId).ExecuteAsync(cancellationToken);
        return result.SelfLink;
    }

    private static async Task<string> CreateRoutineResource(BigqueryService service, string projectId, string datasetId, Input input, CancellationToken cancellationToken)
    {
        List<Argument> args = new();
        Dictionary<string, string> userDefinedContext = new();
        List<string> importedLibraries = new();

        if (input.Argument is not null)
            foreach (var param in input.Argument)
                args.Add(new Argument()
                {
                    Name = string.IsNullOrWhiteSpace(param.Name) ? null : param.Name,
                    Mode = string.IsNullOrWhiteSpace(param.Mode) ? null : param.Mode,
                    DataType = new StandardSqlDataType { TypeKind = param.DataType.ToUpper() },
                    ArgumentKind = param.ArgumentKind.ToString().ToUpper(),
                });

        if (input.RemoteUserDefinedContext is not null)
            foreach (var param in input.RemoteUserDefinedContext)
                userDefinedContext.Add(param.Key, param.Value);

        if (input.ImportedLibrary is not null)
            foreach (var param in input.ImportedLibrary)
                importedLibraries.Add(param.Value);

        Routine routine = new()
        {
            Arguments = args,
            DefinitionBody = input.DefinitionBody,
            Language = input.Language,
            ImportedLibraries = importedLibraries is null ? null : importedLibraries,
            Description = string.IsNullOrWhiteSpace(input.Description) ? null : input.Description,
            DeterminismLevel = input.DeterminismLevel.ToString(),
            RoutineType = input.RoutineType.ToString(),
            StrictMode = input.StrictMode,
            ReturnType = new StandardSqlDataType { TypeKind = input.ReturnType.ToUpper() },
            RoutineReference = new()
            {
                DatasetId = datasetId,
                ProjectId = projectId,
                RoutineId = input.RoutineId,
            }
        };

        if (input.SetRemoteFunctionParameters)
            routine.RemoteFunctionOptions = new()
            {
                Connection = input.RemoteConnection,
                UserDefinedContext = userDefinedContext is null ? null : userDefinedContext,
                Endpoint = input.RemoteEndpoint,
                MaxBatchingRows = input.RemoteMaxBatchingRows,
            };

        await service.Routines.Insert(routine, projectId, datasetId).ExecuteAsync(cancellationToken);
        return string.Empty;
    }

    private static async Task<string> CreateTableResource(BigqueryService service, string projectId, string datasetId, Input input, CancellationToken cancellationToken)
    {
        TableSchema tableSchema = new();
        List<TableFieldSchema> tableFieldSchema = new();
        Dictionary<string, string> labels = new();

        if (input.TableSchema is not null)
        {
            foreach (var param in input.TableSchema)
                tableFieldSchema.Add(
                    new TableFieldSchema
                    {
                        Name = param.Name,
                        Type = param.Type.ToUpper(),
                    });

            tableSchema.Fields = tableFieldSchema;
        }

        if (input.Label is not null)
            foreach (var param in input.Label)
                labels.Add(param.Key, param.Value);

        Table table = new()
        {
            TableReference = new TableReference
            {
                ProjectId = projectId,
                DatasetId = datasetId,
                TableId = input.TableId
            },
            EncryptionConfiguration = !input.SetEncryptionConfiguration ? null : new EncryptionConfiguration
            {
                KmsKeyName = input.KmsKeyName
            },
            RequirePartitionFilter = input.RequirePartitionFilter,
            Schema = tableSchema is null ? null : tableSchema,
            Description = string.IsNullOrWhiteSpace(input.Description) ? null : input.Description,
            FriendlyName = string.IsNullOrWhiteSpace(input.FriendlyName) ? null : input.FriendlyName,
            Labels = labels is null ? null : labels,
        };

        if (input.Partition is TablePartitionOptions.RangePartitioning)
            table.RangePartitioning = new RangePartitioning()
            {
                Field = input.RangeField.ToUpper(),
                Range = new RangePartitioning.RangeData()
                {
                    Start = input.RangeStart,
                    End = input.RangeEnd,
                    Interval = input.RangeInterval,
                }
            };
        else
            table.TimePartitioning = new TimePartitioning()
            {
                RequirePartitionFilter = input.TimeRequirePartitionFilter,
                ExpirationMs = input.ExpirationMs,
                Field = input.TimeField,
                Type = input.Type.ToString()
            };

        var tableResult = await service.Tables.Insert(table, projectId, datasetId).ExecuteAsync(cancellationToken);
        return tableResult.SelfLink;
    }

    private static async Task<string> CreateRequest(BigqueryService service, Connection connection, Input input, CancellationToken cancellationToken)
    {
        return input.Resource switch
        {
            Resources.Dataset => await CreateDatasetResource(service, connection.ProjectId, input, cancellationToken),
            Resources.Routine => await CreateRoutineResource(service, connection.ProjectId, connection.DatasetId, input, cancellationToken),
            Resources.Table => await CreateTableResource(service, connection.ProjectId, connection.DatasetId, input, cancellationToken),
            _ => throw new Exception("Invalid resource type."),
        };
    }
}
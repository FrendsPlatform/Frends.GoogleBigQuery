using Frends.GoogleBigQuery.GetResource.Definitions;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using Newtonsoft.Json.Linq;
using System;
using System.ComponentModel;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.GoogleBigQuery.GetResource;

/// <summary>
/// Google BigQuery Task.
/// </summary>
public class GoogleBigQuery
{
    /// <summary>
    /// Get resource.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.GoogleBigQuery.GetResource)
    /// </summary>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, dynamic Data, string ErrorMessage }</returns>
    public static async Task<Result> GetResource([PropertyTab] Connection connection, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            var serviceInitializer = new BaseClientService.Initializer
            {
                HttpClientInitializer = await GetServiceAccountCredential(connection, cancellationToken),
                ApplicationName = "BigQueryApp",
                BaseUri = connection.BaseUri,
            };
            var bigqueryService = new BigqueryService(serviceInitializer);

            if (bigqueryService is not null)
                return new Result(true, await GetRequest(new BigqueryService(serviceInitializer), connection, cancellationToken), null);
            else
            {
                if (options.ThrowOnError)
                    throw new Exception("Failed to initialize BigqueryService.");

                return new Result(false, null, "Failed to initialize BigqueryService.");
            }
        }
        catch (Exception ex)
        {
            if (options.ThrowOnError)
                throw new Exception($"Error occured: {ex.Message}");

            return new Result(false, null, $"Error occured: {ex.Message}");
        }
    }

    //[ExcludeFromCodeCoverage(Justification = "Can't use JSON file in CI.")]
    private static async Task<ServiceAccountCredential> GetServiceAccountCredential(Connection connection, CancellationToken cancellationToken)
    {
        var jsonCredentials = connection.ReadJsonMethod == ReadJsonMethods.File ? await File.ReadAllTextAsync(connection.CredentialsFilePath, cancellationToken) : connection.SecretJson;

        using var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(jsonCredentials));
        ServiceAccountCredential credential = GoogleCredential.FromStream(stream)
                                         .CreateScoped(BigqueryService.Scope.Bigquery)
                                         .UnderlyingCredential as ServiceAccountCredential;

        return credential;
    }

    private static async Task<JToken> GetRequest(BigqueryService service, Connection connection, CancellationToken cancellationToken)
    {
        switch (connection.Resource)
        {
            case Resources.Datasets:
                var datasetResponse = await service.Datasets.Get(connection.ProjectId, connection.DatasetId).ExecuteAsync(cancellationToken);
                return JToken.FromObject(JsonSerializer.Serialize(datasetResponse));
            case Resources.Jobs:
                var jobResponse = await service.Jobs.Get(connection.ProjectId, connection.JobId).ExecuteAsync(cancellationToken);
                return JToken.FromObject(JsonSerializer.Serialize(jobResponse));
            case Resources.Models:
                var modelResponse = await service.Models.Get(connection.ProjectId, connection.DatasetId, connection.ModelId).ExecuteAsync(cancellationToken);
                return JToken.FromObject(JsonSerializer.Serialize(modelResponse));
            case Resources.Routines:
                var requestRoutine = service.Routines.Get(connection.ProjectId, connection.DatasetId, connection.RoutineId);
                if (!string.IsNullOrWhiteSpace(connection.ReadMask))
                    requestRoutine.ReadMask = connection.ReadMask;
                var routineResponse = await requestRoutine.ExecuteAsync(cancellationToken);
                return JToken.FromObject(JsonSerializer.Serialize(routineResponse));
            case Resources.Tables:
                var requestTables = service.Tables.Get(connection.ProjectId, connection.DatasetId, connection.TableId);
                if (!string.IsNullOrWhiteSpace(connection.SelectedFields))
                    requestTables.SelectedFields = connection.SelectedFields;

                requestTables.View = connection.View switch
                {
                    Views.Full => (TablesResource.GetRequest.ViewEnum?)TablesResource.GetRequest.ViewEnum.FULL,
                    Views.Basic => (TablesResource.GetRequest.ViewEnum?)TablesResource.GetRequest.ViewEnum.BASIC,
                    Views.Storagestats => (TablesResource.GetRequest.ViewEnum?)TablesResource.GetRequest.ViewEnum.STORAGESTATS,
                    Views.Tablemetadataviewunspecified => (TablesResource.GetRequest.ViewEnum?)TablesResource.GetRequest.ViewEnum.TABLEMETADATAVIEWUNSPECIFIED,
                    _ => (TablesResource.GetRequest.ViewEnum?)TablesResource.GetRequest.ViewEnum.STORAGESTATS,
                };

                var tableResponse = await requestTables.ExecuteAsync(cancellationToken);
                return JToken.FromObject(JsonSerializer.Serialize(tableResponse));
            default:
                throw new Exception("Resource not supported.");
        }
    }
}